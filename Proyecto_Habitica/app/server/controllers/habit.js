"use strict";


const utils = require('./utils');

class HabitException{
	constructor(errorMessage){
		this.errorMessage = errorMessage;
	}
}

class Habit{
	constructor(userEmail, title, difficulty, tag, counter) {
        this._id = utils.generateId('habit');
        this.userEmail = userEmail
        this.title = title
        this.difficulty = difficulty //pendiente
        this.tag = tag
        this.counter = counter //status se obtiene de streak
    }
    //id
    get id() {
        return this._id;
    }
    set id(val) {
    	throw new HabitException('id have to be autogenerated.');
    }
    //userEmail
    get userEmail() {
        return this._userEmail;
    }
    set userEmail(val) {
        if(typeof val !== "string" || val == ''){
            throw new HabitException('Habit userEmail cannot be empty.');
        }
        this._userEmail = val;
    }
    //title
    get title() {
        return this._title;
    }
    set title(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new HabitException('Habit title cannot be empty.');
    	}
        this._title = val;
    }
    //difficulty
    get difficulty() {
        return this._difficulty;
    }
    set difficulty(val) {
        if( val == '' || val === undefined){
            this._difficulty = "easy";
        } else {
            if(typeof val !== "string"){
                throw new HabitException('difficulty cannot be empty.');
            }
            this._difficulty = val;
        }
    }
    //tag
    get tag() {
        return this._tag;
    }
    set tag(val) {
        if(typeof val !== "string" && val !== undefined){
            throw new HabitException('tag is not valid.');
        }
        if(val === undefined){
            this._tag = '';
        }else{
            this._tag = val;
        }
    }
    //counter
    get counter() {
        return this._counter;
    }
    set counter(val) {
        if(val === undefined){
            this._counter = 0;
        } else {
            if(typeof val !== "number" || val < 0){
            throw new HabitException('counter cannot be negative or not number.');
            }
            this._counter = val;
        }
    }

    //Convertimos el String de JSON recibido 
    //en una nueva instancia de Habito
    static createFromJson(jsonValue){
    	let obj = JSON.parse(jsonValue);
    	return Habit.createFromObject(obj);
    }

    //Convertimos el objeto recibido en una
    //nueva instancia de Habito

    //le entra algo como let a = {'bntCnt': 15};
    static createFromObject(obj){
        console.log("inside createFromObject")
    	let newHabit = {};
    	Object.assign(newHabit, obj); //clone object and handle
    	Habit.cleanObject(newHabit);
        if(newHabit instanceof Habit){
            return newHabit;
        } else {
        	//Falta ir pasando los valores a un Habito que pertenezca a la clase
        	let habit = new Habit(newHabit['userEmail'], newHabit['title'], newHabit['difficulty'], newHabit['tag'], newHabit['counter']);
        	return habit;
        }
    }

    //Limpiamos el objeto recibido de todos
    //aquellos valores ajenos a la clase Habit
    static cleanObject(obj){
    	const HabitProperties = ['userEmail', 'title', 'difficulty', 'tag', 'counter'];
        
        for (let prop in obj){
            let prop_clean = prop.replace(/_/g, "");
            Object.defineProperty(obj, prop_clean,
                Object.getOwnPropertyDescriptor(obj, prop));
    		//if prop not in HabitProperties
    		if(HabitProperties.indexOf(prop) == -1){
            	delete obj[prop];
            }
    	}
    }


}


module.exports = Habit;