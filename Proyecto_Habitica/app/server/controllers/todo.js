"use strict";

class TodoException{
	constructor(errorMessage){
		this.errorMessage = errorMessage;
	}
}

class Todo{
	constructor(title) {
        this._id = generateId('todo');
        this.title = title
        this.dificultad = "easy"
        this.tagId = ''
        this.date = getTodayDate();
        this.status = "good"
    }
    //id
    get id() {
        return this._id;
    }
    set id(val) {
    	throw new TodoException('id have to be autogenerated.');
    }
    //title
    get title() {
        return this._title;
    }
    set title(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new TodoException('Todo title cannot be empty.');
    	}
        this._title = val;
    }
    //dificultad
    get dificultad() {
        return this._dificultad;
    }
    set dificultad(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new TodoException('dificultad cannot be empty.');
    	}
        this._dificultad = val;
    }
    //tagId
    get tagId() {
        return this._tagId;
    }
    set tagId(val) {
    	if(typeof val !== "string"){
    		throw new TodoException('tagId is not valid.');
    	}
        this._tagId = val;
    }
    //date
    get date() {
        return this._date;
    }
    set date(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new TodoException('date cannot be empty.');
    	}
        this._date = val;
    }
    //status
    get status() {
        return this._status;
    }
    set status(val) {
        if(val !== "bad" || val !== "good" || val !== "done"){
            throw new HabitException('status not valid.');
        }
        if(typeof val !== "string" || val == ''){
            throw new TodoException('status cannot be empty.');
        }
        this._status = val;
    }
    //streak
    get streak() {
        return this._streak;
    }
    set streak(val) {
        if(typeof val !== "number" || val < 0){
            throw new TodoException('streak cannot be negative or not number.');
        }
        this._streak = val;
    }

    //Convertimos el String de JSON recibido 
    //en una nueva instancia de Todoo
    static createFromJson(jsonValue){
    	let obj = JSON.parse(jsonValue);
    	return Todo.createFromObject(obj);
    }

    //Convertimos el objeto recibido en una
    //nueva instancia de Todoo

    //le entra algo como let a = {'bntCnt': 15};
    static createFromObject(obj){
    	let newTodo = {};
    	Object.assign(newTodo, obj); //clone object and handle
    	Todo.cleanObject(newTodo);
    	//Falta ir pasando los valores a un Todoo que pertenezca a la clase
    	let todo = new Todo(newTodo['title']);
    	return todo;
    }

    //Limpiamos el objeto recibido de todos
    //aquellos valores ajenos a la clase Todo
    static cleanObject(obj){
    	const TodoProperties = ['title', 'dificultad', 'tagId', 'date', 'bntCnt', 'status', 'streak'];
    	for (let prop in obj){
    		//if prop not in TodoProperties
    		if(TodoProperties.indexOf(prop) == -1){
            	delete obj[prop];
            }
    	}
    }


}
