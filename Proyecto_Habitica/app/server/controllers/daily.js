"use strict";

class DailyException{
	constructor(errorMessage){
		this.errorMessage = errorMessage;
	}
}

class Daily{
	constructor(title) {
        this._id = generateId('daily');
        this.title = title
        this.dificultad = "easy"
        this.tagId = ''
        this.validOn = ["mon","tue"]
        this.status = "good"
        this.streak = 0
    }
    //id
    get id() {
        return this._id;
    }
    set id(val) {
    	throw new DailyException('id have to be autogenerated.');
    }
    //title
    get title() {
        return this._title;
    }
    set title(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new DailyException('Daily title cannot be empty.');
    	}
        this._title = val;
    }
    //dificultad
    get dificultad() {
        return this._dificultad;
    }
    set dificultad(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new DailyException('dificultad cannot be empty.');
    	}
        this._dificultad = val;
    }
    //tagId
    get tagId() {
        return this._tagId;
    }
    set tagId(val) {
    	if(typeof val !== "string"){
    		throw new DailyException('tagId is not valid.');
    	}
        this._tagId = val;
    }
    //validOn
    get validOn() {
        return this._validOn;
    }
    set validOn(val) {

        this._validOn = [];
        if(Array.isArray(val)){
            for(let day of val){
                if(day !== "mon" || day !== "tue" || day !== "wed" || day !== "thu" ||
                   day !== "fri" || day !== "sat" || day !== "sun" || val !== ''){
                    throw new HabitException('day of validOn not valid.');
                }
                this._validOn.push(day);
            }
        } else {
            if(val !== "mon" || val !== "tue" || val !== "wed" || val !== "tue" ||
               val !== "fri" || val !== "sat" || val !== "sun" || val !== ''){
                throw new HabitException('day of validOn not valid.');
            }
            this._validOn.push(val);
        }
    }
    //status
    get status() {
        return this._status;
    }
    set status(val) {
        if(val !== "bad" || val !== "good" || val !== "done"){
            throw new HabitException('status not valid.');
        }
        if(typeof val !== "string" || val == ''){
            throw new DailyException('status cannot be empty.');
        }
        this._status = val;
    }
    //streak
    get streak() {
        return this._streak;
    }
    set streak(val) {
        if(typeof val !== "number" || val < 0){
            throw new DailyException('streak cannot be negative or not number.');
        }
        this._streak = val;
    }

    //Convertimos el String de JSON recibido 
    //en una nueva instancia de Dailyo
    static createFromJson(jsonValue){
    	let obj = JSON.parse(jsonValue);
    	return Daily.createFromObject(obj);
    }

    //Convertimos el objeto recibido en una
    //nueva instancia de Dailyo

    //le entra algo como let a = {'bntCnt': 15};
    static createFromObject(obj){
    	let newDaily = {};
    	Object.assign(newDaily, obj); //clone object and handle
    	Daily.cleanObject(newDaily);
    	//Falta ir pasando los valores a un Dailyo que pertenezca a la clase
    	let daily = new Daily(newDaily['title']);
    	return daily;
    }

    //Limpiamos el objeto recibido de todos
    //aquellos valores ajenos a la clase Daily
    static cleanObject(obj){
    	const DailyProperties = ['title', 'dificultad', 'tagId', 'validOn', 'status', 'streak'];

    	for (let prop in obj){
    		//if prop not in DailyProperties
    		if(DailyProperties.indexOf(prop) == -1){
            	delete obj[prop];
            }
    	}
    }


}
