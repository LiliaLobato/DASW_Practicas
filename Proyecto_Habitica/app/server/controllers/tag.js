"use strict";

class TagException{
	constructor(errorMessage){
		this.errorMessage = errorMessage;
	}
}

class Tag{
	constructor(title) {
        this._id = generateId('tag');
        this.title = title //ya estan definidas, el filtro es un checkbox
    }
    //id
    get id() {
        return this._id;
    }
    set id(val) {
    	throw new TagException('id have to be autogenerated.');
    }
    //title
    get title() {
        return this._title;
    }
    set title(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new TagException('Tag title cannot be empty.');
    	}
        this._title = val;
    }

    //Convertimos el String de JSON recibido 
    //en una nueva instancia de Tago
    static createFromJson(jsonValue){
    	let obj = JSON.parse(jsonValue);
    	return Tag.createFromObject(obj);
    }

    //Convertimos el objeto recibido en una
    //nueva instancia de Tago

    //le entra algo como let a = {'points': 15};
    static createFromObject(obj){
    	let newTag = {};

    	Object.assign(newTag, obj); //clone object and handle
    	Tag.cleanObject(newTag);
    	//Falta ir pasando los valores a un Tago que pertenezca a la clase
    	let tag = new Tag(newTag['title']);
    	return tag;
    }

    //Limpiamos el objeto recibido de todos
    //aquellos valores ajenos a la clase Tag
    static cleanObject(obj){
    	const TagProperties = ['title'];
    	for (let prop in obj){
    		//if prop not in TagProperties
    		if(TagProperties.indexOf(prop) == -1){
            	delete obj[prop];
            }
    	}
    }


}
