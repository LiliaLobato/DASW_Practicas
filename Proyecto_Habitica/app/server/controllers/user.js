"use strict";

class userDataException{
	constructor(errorMessage){
		this.errorMessage = errorMessage;
	}
}

class userData{
	constructor(){
        this._id = generateId('user');
        this.avatarImg = avatarImg
        this.avatarName = avatarName
        this.avatarLevel = avatarLevel
        this.avatarCoins = avatarCoins
        this.avatarHealth = avatarHealth
        this.avatarExp = avatarExp
		this.habitId = [];
        this.dialyId = [];
        this.todoId = [];
        this.tagId = [];
	}
    //id
    get id() {
        return this._id;
    }
    set id(val) {
        throw new DailyException('id have to be autogenerated.');
    }
    //avatarImg
    get avatarImg() {
        return this._avatarImg;
    }
    set avatarImg(val) {
        if(typeof val !== "string" || val == ''){
            throw new DailyException('Daily avatarImg cannot be empty.');
        }
        this._avatarImg = val;
    }
    //avatarName
    get avatarName() {
        return this._avatarName;
    }
    set avatarName(val) {
        if(typeof val !== "string" || val == ''){
            throw new DailyException('Daily avatarName cannot be empty.');
        }
        this._avatarName = val;
    }
    //avatarLevel
    get avatarLevel() {
        return this._avatarLevel;
    }
    set avatarLevel(val) {
        if(typeof val !== "number" || val < 0){
            throw new DailyException('avatarLevel cannot be negative or not number.');
        }
        this._avatarLevel = val;
    }
    //avatarCoins
    get avatarCoins() {
        return this._avatarCoins;
    }
    set avatarCoins(val) {
        if(typeof val !== "number" || val < 0){
            throw new DailyException('avatarCoins cannot be negative or not number.');
        }
        this._avatarCoins = val;
    }
    //avatarHealth
    get avatarHealth() {
        return this._avatarHealth;
    }
    set avatarHealth(val) {
        if(typeof val !== "number" || val < 0){
            throw new DailyException('avatarHealth cannot be negative or not number.');
        }
        this._avatarHealth = val;
    }
    //avatarExp
    get avatarExp() {
        return this._avatarExp;
    }
    set avatarExp(val) {
        if(typeof val !== "number" || val < 0){
            throw new DailyException('avatarExp cannot be negative or not number.');
        }
        this._avatarExp = val;
    }

}
