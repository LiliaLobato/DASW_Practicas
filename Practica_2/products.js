"use strict";

class ProductException{
	constructor(errorMessage){
		this.errorMessage = errorMessage;
	}
}

class Product{
	constructor(title, description, imageUrl, unit, stock, pricePerUnit, category) {
        this._uuid = generateUUID();
        this.title = title
        this.description = description
        this.imageUrl = imageUrl
        this.unit = unit
        this.stock = stock
        this.pricePerUnit = pricePerUnit
        this.category = category
    }
    //uuid
    get uuid() {
        return this._uuid;
    }
    set uuid(val) {
    	throw new ProductException('UUID have to be autogenerated.');
    }
    //title
    get title() {
        return this._title;
    }
    set title(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new ProductException('Product title cannot be empty.');
    	}
        this._title = val;
    }
    //description
    get description() {
        return this._description;
    }
    set description(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new ProductException('Description cannot be empty.');
    	}
        this._description = val;
    }
    //imageUrl
    get imageUrl() {
        return this._imageUrl;
    }
    set imageUrl(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new ProductException('Image URL cannot be empty.');
    	}
        this._imageUrl = val;
    }
    //unit
    get unit() {
        return this._unit;
    }
    set unit(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new ProductException('Unit cannot be empty.');
    	}
        this._unit = val;
    }
    //stock
    get stock() {
        return this._stock;
    }
    set stock(val) {
    	if(typeof val !== "number" || val < 0){
    		throw new ProductException('Stock cannot be negative or not number.');
    	}
        this._stock = val;
    }
    //pricePerUnit
    get pricePerUnit() {
        return this._pricePerUnit;
    }
    set pricePerUnit(val) {
    	if(typeof val !== "number" || val < 0){
    		throw new ProductException('Price Per Unit cannot be negative or not number.');
    	}
        this._pricePerUnit = val;
    }
    //category
    get category() {
        return this._category;
    }
    set category(val) {
    	if(typeof val !== "string" || val == ''){
    		throw new ProductException('Category cannot be empty.');
    	}
        this._category = val;
    }

    
    static createFromJson(jsonValue){
    	let obj = JSON.parse(jsonValue);
    	return Product.createFromObject(obj);
    }

    static createFromObject(obj){
    	let product = new Product();
    	return product;
    }

    static cleanObject(obj){
    	
    }


}

//TEST
let prodTest = new Product('Platano', 'description', 'html://imageUrl.jpg', 'pieza', 15, 3.6, 'Fruta') ;
console.log(prodTest);

